#!/bin/bash

# PDVIEW - Script de Instala√ß√£o Autom√°tica
# Instala tudo que √© necess√°rio automaticamente no Orange Pi
# Para usu√°rios leigos - apenas execute: curl -sSL https://raw.githubusercontent.com/BrunoNascimentoBarbosa/PDVIEW-PRICE-V2/main/setup.sh | bash

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Banner
echo -e "${BLUE}"
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë                    PDVIEW SETUP AUTOM√ÅTICO                  ‚ïë"
echo "‚ïë              Sistema de Pre√ßos para Orange Pi               ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo -e "${NC}"

# Fun√ß√£o para imprimir mensagens
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Verificar se est√° rodando como root
if [[ $EUID -eq 0 ]]; then
    log_error "Este script n√£o deve ser executado como root!"
    echo "Execute como usu√°rio normal: bash setup.sh"
    exit 1
fi

# Detectar sistema operacional e arquitetura
OS=$(lsb_release -si 2>/dev/null || echo "Unknown")
ARCH=$(uname -m)
DISTRO=$(lsb_release -cs 2>/dev/null || echo "unknown")

log_info "Sistema detectado: $OS $DISTRO ($ARCH)"

# Verificar se √© sistema compat√≠vel
if [[ "$ARCH" != "aarch64" && "$ARCH" != "armv7l" && "$ARCH" != "x86_64" ]]; then
    log_warning "Arquitetura $ARCH pode n√£o ser totalmente compat√≠vel"
fi

# Diret√≥rios
PROJECT_DIR="$HOME/pdview"
TEMP_DIR="/tmp/pdview-setup"
GO_VERSION="1.21.4"

# Fun√ß√£o para instalar depend√™ncias do sistema
install_system_deps() {
    log_info "Instalando depend√™ncias do sistema..."

    # Atualizar lista de pacotes
    sudo apt update -qq

    # Instalar depend√™ncias b√°sicas
    sudo apt install -y \
        curl \
        wget \
        git \
        build-essential \
        sqlite3 \
        ffmpeg \
        unzip \
        systemctl \
        ufw 2>/dev/null || true

    log_success "Depend√™ncias do sistema instaladas"
}

# Fun√ß√£o para instalar Go
install_go() {
    # Verificar se Go j√° est√° instalado
    if command -v go &> /dev/null; then
        CURRENT_GO_VERSION=$(go version | awk '{print $3}' | sed 's/go//')
        log_info "Go $CURRENT_GO_VERSION j√° est√° instalado"
        return 0
    fi

    log_info "Instalando Go $GO_VERSION..."

    # Detectar arquitetura para download
    case $ARCH in
        "aarch64")
            GO_ARCH="linux-arm64"
            ;;
        "armv7l")
            GO_ARCH="linux-armv6l"
            ;;
        "x86_64")
            GO_ARCH="linux-amd64"
            ;;
        *)
            log_error "Arquitetura $ARCH n√£o suportada"
            exit 1
            ;;
    esac

    # Download e instala√ß√£o do Go
    cd /tmp
    wget -q "https://go.dev/dl/go${GO_VERSION}.${GO_ARCH}.tar.gz"

    # Remover instala√ß√£o anterior se existir
    sudo rm -rf /usr/local/go

    # Extrair Go
    sudo tar -C /usr/local -xzf "go${GO_VERSION}.${GO_ARCH}.tar.gz"

    # Configurar PATH
    echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
    echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.profile
    export PATH=$PATH:/usr/local/go/bin

    # Limpar download
    rm "go${GO_VERSION}.${GO_ARCH}.tar.gz"

    log_success "Go $GO_VERSION instalado com sucesso"
}

# Fun√ß√£o para baixar o projeto
download_project() {
    log_info "Baixando projeto PDVIEW..."

    # Remover diret√≥rio anterior se existir
    if [ -d "$PROJECT_DIR" ]; then
        log_warning "Removendo instala√ß√£o anterior..."
        rm -rf "$PROJECT_DIR"
    fi

    # Criar diret√≥rio tempor√°rio
    mkdir -p "$TEMP_DIR"
    cd "$TEMP_DIR"

    # Baixar projeto do GitHub
    git clone https://github.com/BrunoNascimentoBarbosa/PDVIEW-PRICE-V2.git .

    # Mover para diret√≥rio final
    mv "$TEMP_DIR" "$PROJECT_DIR"
    cd "$PROJECT_DIR"

    log_success "Projeto baixado para $PROJECT_DIR"
}

# Fun√ß√£o para compilar o projeto
build_project() {
    log_info "Compilando projeto..."

    cd "$PROJECT_DIR"

    # Garantir que Go est√° no PATH
    export PATH=$PATH:/usr/local/go/bin

    # Inicializar m√≥dulo Go e baixar depend√™ncias
    go mod download
    go mod tidy

    # Compilar para a arquitetura atual
    go build -ldflags="-s -w" -o pdview main.go

    # Tornar execut√°vel
    chmod +x pdview

    log_success "Projeto compilado com sucesso"
}

# Fun√ß√£o para criar estrutura de dados
setup_data() {
    log_info "Configurando estrutura de dados..."

    cd "$PROJECT_DIR"

    # Criar diret√≥rios necess√°rios
    mkdir -p data logs videos

    # Definir permiss√µes
    chmod 755 data logs videos

    log_success "Estrutura de dados configurada"
}

# Fun√ß√£o para configurar servi√ßo systemd
setup_service() {
    log_info "Configurando servi√ßo do sistema..."

    cd "$PROJECT_DIR"

    # Criar arquivo de servi√ßo personalizado
    cat > pdview.service << EOF
[Unit]
Description=PDVIEW Orange Pi Service
After=network.target network-online.target
Wants=network-online.target

[Service]
Type=simple
User=$USER
Group=$USER
WorkingDirectory=$PROJECT_DIR
ExecStart=$PROJECT_DIR/pdview
Restart=always
RestartSec=5
StandardOutput=journal
StandardError=journal
SyslogIdentifier=pdview
Environment="PORT=8080"
Environment="GOGC=50"

[Install]
WantedBy=multi-user.target
EOF

    # Instalar servi√ßo
    sudo cp pdview.service /etc/systemd/system/
    sudo systemctl daemon-reload
    sudo systemctl enable pdview

    log_success "Servi√ßo configurado e habilitado"
}

# Fun√ß√£o para configurar firewall
setup_firewall() {
    log_info "Configurando firewall..."

    # Verificar se ufw est√° dispon√≠vel
    if command -v ufw &> /dev/null; then
        sudo ufw allow 8080/tcp 2>/dev/null || true
        log_success "Porta 8080 liberada no firewall"
    else
        log_warning "UFW n√£o encontrado, configure o firewall manualmente se necess√°rio"
    fi
}

# Fun√ß√£o para iniciar servi√ßos
start_services() {
    log_info "Iniciando servi√ßos..."

    # Iniciar servi√ßo
    sudo systemctl start pdview

    # Verificar se iniciou corretamente
    sleep 3
    if systemctl is-active --quiet pdview; then
        log_success "Servi√ßo PDVIEW iniciado com sucesso"
    else
        log_error "Falha ao iniciar servi√ßo. Verificando logs..."
        sudo journalctl -u pdview -n 10 --no-pager
        exit 1
    fi
}

# Fun√ß√£o para criar scripts de controle
create_shortcuts() {
    log_info "Criando atalhos de controle..."

    cd "$PROJECT_DIR"

    # Script de controle
    cat > control.sh << 'EOF'
#!/bin/bash
case "$1" in
    start)
        sudo systemctl start pdview
        echo "‚úÖ PDVIEW iniciado"
        ;;
    stop)
        sudo systemctl stop pdview
        echo "‚èπÔ∏è  PDVIEW parado"
        ;;
    restart)
        sudo systemctl restart pdview
        echo "üîÑ PDVIEW reiniciado"
        ;;
    status)
        sudo systemctl status pdview
        ;;
    logs)
        sudo journalctl -u pdview -f
        ;;
    update)
        cd ~/pdview
        git pull
        go build -ldflags="-s -w" -o pdview main.go
        sudo systemctl restart pdview
        echo "üöÄ PDVIEW atualizado e reiniciado"
        ;;
    *)
        echo "Uso: ./control.sh {start|stop|restart|status|logs|update}"
        exit 1
        ;;
esac
EOF

    chmod +x control.sh

    # Criar link no PATH se poss√≠vel
    mkdir -p "$HOME/bin"
    ln -sf "$PROJECT_DIR/control.sh" "$HOME/bin/pdview" 2>/dev/null || true

    log_success "Scripts de controle criados"
}

# Fun√ß√£o para exibir informa√ß√µes finais
show_final_info() {
    # Obter IP local
    IP=$(hostname -I | awk '{print $1}' | head -1)

    echo ""
    echo -e "${GREEN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${GREEN}‚ïë                 üéâ INSTALA√á√ÉO CONCLU√çDA! üéâ                  ‚ïë${NC}"
    echo -e "${GREEN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    echo -e "${BLUE}üìç INFORMA√á√ïES DE ACESSO:${NC}"
    echo "   üåê Interface Admin: http://${IP}:8080"
    echo "   üì∫ Player: http://${IP}:8080/player.html"
    echo "   üìÅ Diret√≥rio: $PROJECT_DIR"
    echo ""
    echo -e "${BLUE}üéõÔ∏è  COMANDOS √öTEIS:${NC}"
    echo "   Iniciar:    ./control.sh start"
    echo "   Parar:      ./control.sh stop"
    echo "   Reiniciar:  ./control.sh restart"
    echo "   Status:     ./control.sh status"
    echo "   Logs:       ./control.sh logs"
    echo "   Atualizar:  ./control.sh update"
    echo ""
    echo -e "${BLUE}üìã PR√ìXIMOS PASSOS:${NC}"
    echo "   1. Abra um navegador e acesse: http://${IP}:8080"
    echo "   2. Configure os pre√ßos de combust√≠vel"
    echo "   3. Teste o player em: http://${IP}:8080/player.html"
    echo ""
    echo -e "${YELLOW}üìù NOTAS IMPORTANTES:${NC}"
    echo "   ‚Ä¢ O servi√ßo inicia automaticamente no boot"
    echo "   ‚Ä¢ Para adicionar v√≠deo: coloque em $PROJECT_DIR/videos/base.mp4"
    echo "   ‚Ä¢ Use ./optimize-video.sh para otimizar v√≠deos"
    echo ""
    echo -e "${GREEN}‚ú® PDVIEW est√° rodando e pronto para uso! ‚ú®${NC}"
}

# Fun√ß√£o principal
main() {
    log_info "Iniciando instala√ß√£o autom√°tica do PDVIEW..."

    # Verificar conex√£o com internet
    if ! ping -c 1 google.com &> /dev/null; then
        log_error "Sem conex√£o com internet. Verifique sua conex√£o e tente novamente."
        exit 1
    fi

    # Executar instala√ß√£o passo a passo
    install_system_deps
    install_go
    download_project
    build_project
    setup_data
    setup_service
    setup_firewall
    create_shortcuts
    start_services
    show_final_info

    log_success "Instala√ß√£o autom√°tica conclu√≠da com sucesso!"
}

# Executar instala√ß√£o
main "$@"